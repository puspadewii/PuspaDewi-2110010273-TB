/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

/**
 *
 * @author PUSPA
 */

import com.mysql.cj.jdbc.PreparedStatementWrapper;
import com.mysql.cj.protocol.Resultset;
import db.Koneksi;
import java.sql.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

public class FormMahasiswa extends javax.swing.JFrame {

    /**
     * Creates new form FormMahasiswa
     */
    
    private final Connection conn;
    
    public FormMahasiswa() {
        initComponents();
        
        conn = Koneksi.getConnection();
        setTabelModel();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textNim = new javax.swing.JTextField();
        textNama = new javax.swing.JTextField();
        textJurusan = new javax.swing.JTextField();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnKembali = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMahasiswa = new javax.swing.JTable();
        textCari = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();
        btnCetak = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Data Mahasiswa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N

        jLabel1.setText("NIM");

        jLabel2.setText("Nama");

        jLabel3.setText("Jurusan");

        textNim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textNim)
                    .addComponent(textNama, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(textJurusan))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textNim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textJurusan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnKembali.setText("Kembali");
        btnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKembaliActionPerformed(evt);
            }
        });

        tblMahasiswa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMahasiswaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMahasiswa);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCari.setText("Cari Data");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        btnCetak.setText("Cetak");
        btnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textCari, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSimpan)
                                    .addComponent(btnKembali)
                                    .addComponent(btnEdit)
                                    .addComponent(btnHapus)
                                    .addComponent(btnClear))
                                .addGap(7, 7, 7))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCetak)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSimpan)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnHapus)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnKembali))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari)
                    .addComponent(btnCetak))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textNimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNimActionPerformed

    private void btnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKembaliActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        FormMenu menu = new FormMenu();
        menu.setVisible(true);
    }//GEN-LAST:event_btnKembaliActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        textNim.setText(null);
        textNama.setText(null);
        textJurusan.setText(null);
        textCari.setText(null);
    }//GEN-LAST:event_btnClearActionPerformed
 
    private boolean isNIMRegistered(String nim) {
    try {
        String sql = "SELECT * FROM mahasiswa WHERE nim = ?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, nim);
            ResultSet rs = st.executeQuery();

            // Jika ada baris yang dikembalikan, NIM sudah terdaftar
            return rs.next();
        }
    } catch (SQLException e) {
        Logger.getLogger(FormMahasiswa.class.getName()).log(Level.SEVERE, null, e);
        return false;
    }
}
    
    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        String nim = textNim.getText();
        String nama = textNama.getText();
        String jurusan = textJurusan.getText();
        
        if (textNim.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "NIM Belum Diisi");
            textNim.requestFocus(); 
        } else if (textNama.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama Belum Diisi");
            textNama.requestFocus();
        } else if (textJurusan.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Jurusan Belum Diisi");
            textJurusan.requestFocus();
        } else if(isNIMRegistered(nim)) {
            // NIM sudah terdaftar, tampilkan pemberitahuan
            JOptionPane.showMessageDialog(this, "NIM sudah terdaftar");
        } else{
            // NIM belum terdaftar, lanjutkan dengan penyimpanan data
            try {
            String sql = "INSERT INTO mahasiswa (nim, nama, jurusan) VALUES (?, ?, ?)";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, nim);
                st.setString(2, nama);
                st.setString(3, jurusan);

                // Eksekusi query
                int rowsInserted = st.executeUpdate();

                if (rowsInserted > 0) {
                    // Data berhasil disimpan
                    JOptionPane.showMessageDialog(this, "Data Berhasil disimpan");
                    // Refresh tabel
                    loadData();
                } else {
                    // Data gagal disimpan
                    JOptionPane.showMessageDialog(this, "Gagal menyimpan data");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormMahasiswa.class.getName()).log(Level.SEVERE, null, e);
        }      
        }         
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Ambil data dari input fields
        String nim = textNim.getText();
        String nama = textNama.getText();
        String jurusan = textJurusan.getText();

        // Pastikan ada baris yang dipilih di tabel
        int selectedRow = tblMahasiswa.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris di tabel yang ingin diedit");
            return;
        }

        // Ambil NIM dari baris terpilih di tabel
        String nimTerpilih = tblMahasiswa.getValueAt(selectedRow, 0).toString();

        // Lakukan operasi edit
        try {
            String sql = "UPDATE mahasiswa SET nim=?, nama=?, jurusan=? WHERE nim=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, nim);
                st.setString(2, nama);
                st.setString(3, jurusan);
                st.setString(4, nimTerpilih);

                // Eksekusi query
                int rowsUpdated = st.executeUpdate();

                if (rowsUpdated > 0) {
                    // Data berhasil diupdate
                    JOptionPane.showMessageDialog(this, "Data Berhasil diupdate");
                    // Refresh tabel
                    loadData();
                    // Bersihkan input fields setelah update
                    clearInputFields();
                } else {
                    // Data gagal diupdate
                    JOptionPane.showMessageDialog(this, "Gagal mengupdate data");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormMahasiswa.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void tblMahasiswaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMahasiswaMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblMahasiswa.getSelectedRow();
        if (selectedRow != -1) {
        String nim = tblMahasiswa.getValueAt(selectedRow, 0).toString();
        String nama = tblMahasiswa.getValueAt(selectedRow, 1).toString();
        String jurusan = tblMahasiswa.getValueAt(selectedRow, 2).toString();

        // Set nilai ke dalam text fields
        textNim.setText(nim);
        textNama.setText(nama);
        textJurusan.setText(jurusan);
        }
    }//GEN-LAST:event_tblMahasiswaMouseClicked

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // Pastikan ada baris yang dipilih di tabel
        int selectedRow = tblMahasiswa.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris di tabel yang ingin dihapus");
            return;
        }

        // Ambil NIM dari baris terpilih di tabel
        String nimTerpilih = tblMahasiswa.getValueAt(selectedRow, 0).toString();

        // Lakukan operasi hapus
        try {
            String sql = "DELETE FROM mahasiswa WHERE nim=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, nimTerpilih);

                // Eksekusi query
                int rowsDeleted = st.executeUpdate();

                if (rowsDeleted > 0) {
                    // Data berhasil dihapus
                    JOptionPane.showMessageDialog(this, "Data Berhasil dihapus");
                    // Refresh tabel
                    loadData();
                    // Bersihkan input fields setelah hapus
                    clearInputFields();
                } else {
                    // Data gagal dihapus
                    JOptionPane.showMessageDialog(this, "Gagal menghapus data");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormMahasiswa.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        String searchKeyword = textCari.getText().trim();

        if (searchKeyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Masukkan kata kunci untuk pencarian", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblMahasiswa.getModel();
        model.setRowCount(0); // Clear existing data in the table

        try {
            String sql = "SELECT * FROM mahasiswa WHERE nim LIKE ? OR nama LIKE ? OR jurusan LIKE ?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, "%" + searchKeyword + "%");
                st.setString(2, "%" + searchKeyword + "%");
                st.setString(3, "%" + searchKeyword + "%");
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String NIM = rs.getString("nim");
                    String Nama = rs.getString("nama");
                    String Jurusan = rs.getString("jurusan");

                    Object[] rowData = {NIM, Nama, Jurusan};
                    model.addRow(rowData);
                }

                if (model.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "Data tidak ditemukan", "Not Found", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormMahasiswa.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat melakukan pencarian", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCariActionPerformed

    private void btnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakActionPerformed
        try {
            String reportPath = "src/report/reportMahasiswa.jasper";
            Connection conn = Koneksi.getConnection(); // Menggunakan metode getConnection() dari kelas Koneksi

            HashMap<String, Object> parameters = new HashMap<>();
            JasperPrint print = JasperFillManager.fillReport(reportPath, parameters, conn);
            JasperViewer viewer = new JasperViewer(print, false);
            viewer.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error displaying report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCetakActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMahasiswa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnCetak;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMahasiswa;
    private javax.swing.JTextField textCari;
    private javax.swing.JTextField textJurusan;
    private javax.swing.JTextField textNama;
    private javax.swing.JTextField textNim;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        getData((DefaultTableModel) tblMahasiswa.getModel());
    }

    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblMahasiswa.getModel();
        model.addColumn("NIM");
        model.addColumn("Nama");
        model.addColumn("Jurusan");
        
        
    }

    private void getData(DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
            String sql = "SELECT * FROM mahasiswa";
            try(PreparedStatement st = conn.prepareStatement(sql)){
                ResultSet rs = st.executeQuery();
                
                while (rs.next()) {
                    String NIM      = rs.getString("nim");
                    String Nama     = rs.getString("nama");
                    String Jurusan  = rs.getString("jurusan");
                    
                    Object[] rowData = {NIM, Nama, Jurusan};
                    model.addRow(rowData);
                }
            } catch (Exception e){
                
            }
        } catch (Exception e){
            Logger.getLogger(FormMahasiswa.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    private void clearInputFields(){
        textNim.setText(null);
        textNama.setText(null);
        textJurusan.setText(null);
    }

}
