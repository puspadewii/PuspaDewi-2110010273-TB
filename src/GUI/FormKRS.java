/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

/**
 *
 * @author PUSPA
 */

import com.mysql.cj.jdbc.PreparedStatementWrapper;
import com.mysql.cj.protocol.Resultset;
import db.Koneksi;
import java.sql.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

public class FormKRS extends javax.swing.JFrame {

    /**
     * Creates new form FormKRS
     */
    
    private final Connection conn;
    
    public FormKRS() {
        initComponents();
        
        conn = Koneksi.getConnection();
        setTabelModel();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textidkrs = new javax.swing.JTextField();
        textNim = new javax.swing.JTextField();
        cmbSemester = new javax.swing.JComboBox<>();
        textMataKuliah = new javax.swing.JTextField();
        textDosen = new javax.swing.JTextField();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnKembali = new javax.swing.JButton();
        textCari = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKRS = new javax.swing.JTable();
        btnClear = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();
        btnCetak = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Data KRS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N

        jLabel1.setText("ID KRS");

        jLabel2.setText("NIM");

        jLabel3.setText("Semester");

        jLabel4.setText("Mata Kuliah");

        jLabel5.setText("Dosen");

        textidkrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textidkrsActionPerformed(evt);
            }
        });

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semester 1", "Semester 2", "Semester 3", "Semester 4", "Semester 5", "Semester 6", "Semester 7", "Semester 8" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(textNim)
                        .addComponent(cmbSemester, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(textidkrs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(38, 38, 38)
                        .addComponent(textMataKuliah, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(67, 67, 67)
                        .addComponent(textDosen)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textidkrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(textMataKuliah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textNim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(textDosen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnKembali.setText("Kembali");
        btnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKembaliActionPerformed(evt);
            }
        });

        tblKRS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKRSMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKRS);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCari.setText("Cari Data");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        btnCetak.setText("Cetak");
        btnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(textCari))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(btnSimpan)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit)
                                .addGap(18, 18, 18)
                                .addComponent(btnHapus)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear)
                                .addGap(18, 18, 18)
                                .addComponent(btnKembali)
                                .addGap(18, 18, 18)
                                .addComponent(btnCetak)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan)
                    .addComponent(btnEdit)
                    .addComponent(btnHapus)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnKembali)
                    .addComponent(btnCetak))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textidkrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textidkrsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textidkrsActionPerformed

    private void btnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKembaliActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        FormMenu menu = new FormMenu();
        menu.setVisible(true);
    }//GEN-LAST:event_btnKembaliActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        textidkrs.setText(null);
        textNim.setText(null);
        cmbSemester.setSelectedItem("Semester 1");
        textMataKuliah.setText(null);
        textDosen.setText(null);
        textCari.setText(null);
    }//GEN-LAST:event_btnClearActionPerformed

    private boolean isNimExists(String nim) {
    try {
        String sql = "SELECT * FROM mahasiswa WHERE nim=?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, nim);
            ResultSet rs = st.executeQuery();
            return rs.next(); // Jika ada data, return true
        }
    } catch (SQLException ex) {
        Logger.getLogger(FormKRS.class.getName()).log(Level.SEVERE, null, ex);
        return false;
    }
}

    
    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        String idkrs = textidkrs.getText();
        String nim = textNim.getText();
        String semester = cmbSemester.getSelectedItem().toString();
        String matakuliah = textMataKuliah.getText();
        String dosen = textDosen.getText();
        
        // Sebelum menyimpan data, periksa apakah nim yang dimasukkan sudah ada di tabel mahasiswa
        if (!isNimExists(nim)) {
            JOptionPane.showMessageDialog(this, "NIM tidak ditemukan di tabel mahasiswa", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (textidkrs.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID KRS Belum Diisi");
            textidkrs.requestFocus(); 
        } else if (textNim.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "NIM Belum Diisi");
            textNim.requestFocus();
        } else if (textMataKuliah.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mata Kuliah Belum Diisi");
            textMataKuliah.requestFocus();
        } else if (textDosen.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Dosen Belum Diisi");
        } else{
            try {
                String sql = "INSERT INTO krs (id_krs, nim, semester, mata_kuliah, dosen) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement st = conn.prepareStatement(sql)) {
                    st.setString(1, idkrs);
                    st.setString(2, nim);
                    st.setInt(3, getSemesterValue(semester));
                    st.setString(4, matakuliah);
                    st.setString(5, dosen);

                    int rowsAffected = st.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");
                        // Bersihkan input setelah penyimpanan
                        clearInputFields();
                        // Perbarui tabel
                        loadData();
                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menyimpan data", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(FormKRS.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data", "Error", JOptionPane.ERROR_MESSAGE);
            }
   
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Ambil data dari input fields
        String idkrs = textidkrs.getText();
        String nim = textNim.getText();
        String semester = cmbSemester.getSelectedItem().toString();
        String matakuliah = textMataKuliah.getText();
        String dosen = textDosen.getText();

        // Pastikan ada baris yang dipilih di tabel
        int selectedRow = tblKRS.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris di tabel yang ingin diedit");
            return;
        }

        // Ambil ID KRS dari baris terpilih di tabel
        String idkrsTerpilih = tblKRS.getValueAt(selectedRow, 0).toString();

        // Lakukan operasi edit
        try {
            String sql = "UPDATE krs SET id_krs=?, nim=?, semester=?, mata_kuliah=?, dosen=? WHERE id_krs=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, idkrs);
                st.setString(2, nim);
                st.setInt(3, getSemesterValue(semester));
                st.setString(4, matakuliah);
                st.setString(5, dosen);
                st.setString(6, idkrsTerpilih);

                // Eksekusi query
                int rowsUpdated = st.executeUpdate();

                if (rowsUpdated > 0) {
                    // Data berhasil diupdate
                    JOptionPane.showMessageDialog(this, "Data Berhasil diupdate");
                    // Refresh tabel
                    loadData();
                    // Bersihkan input fields setelah update
                    clearInputFields();
                } else {
                    // Data gagal diupdate
                    JOptionPane.showMessageDialog(this, "Gagal mengupdate data");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormKRS.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void tblKRSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKRSMouseClicked
        // Dapatkan indeks baris yang dipilih
        int selectedRow = tblKRS.getSelectedRow();

        // Periksa apakah baris terpilih
        if (selectedRow != -1) {
            // Dapatkan data dari baris terpilih
            String idKRS = tblKRS.getValueAt(selectedRow, 0).toString();
            String nim = tblKRS.getValueAt(selectedRow, 1).toString();
            String semester = tblKRS.getValueAt(selectedRow, 2).toString();
            String mataKuliah = tblKRS.getValueAt(selectedRow, 3).toString();
            String dosen = tblKRS.getValueAt(selectedRow, 4).toString();

            // Tetapkan data ke kolom teks
            textidkrs.setText(idKRS);
            textNim.setText(nim);
            cmbSemester.setSelectedItem(semester);
            textMataKuliah.setText(mataKuliah);
            textDosen.setText(dosen);
        }
    }//GEN-LAST:event_tblKRSMouseClicked

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // Pastikan ada baris yang dipilih di tabel
    int selectedRow = tblKRS.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris di tabel yang ingin dihapus");
        return;
    }

    // Konfirmasi penghapusan
    int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        // Ambil ID KRS dari baris terpilih di tabel
        String idkrsTerpilih = tblKRS.getValueAt(selectedRow, 0).toString();

        // Lakukan operasi hapus
        try {
            String sql = "DELETE FROM krs WHERE id_krs=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, idkrsTerpilih);

                // Eksekusi query
                int rowsDeleted = st.executeUpdate();

                if (rowsDeleted > 0) {
                    // Data berhasil dihapus
                    JOptionPane.showMessageDialog(this, "Data berhasil dihapus");
                    // Refresh tabel
                    loadData();
                    // Bersihkan input fields setelah hapus
                    clearInputFields();
                } else {
                    // Data gagal dihapus
                    JOptionPane.showMessageDialog(this, "Gagal menghapus data");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormKRS.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
         String searchKeyword = textCari.getText().trim();

    if (searchKeyword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Masukkan kata kunci untuk pencarian", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    DefaultTableModel model = (DefaultTableModel) tblKRS.getModel();
    model.setRowCount(0); // Clear existing data in the table

    try {
        String sql = "SELECT * FROM krs WHERE id_krs LIKE ? OR nim LIKE ? OR semester LIKE ? OR mata_kuliah LIKE ? OR dosen LIKE ?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, "%" + searchKeyword + "%");
            st.setString(2, "%" + searchKeyword + "%");
            st.setString(3, "%" + searchKeyword + "%");
            st.setString(4, "%" + searchKeyword + "%");
            st.setString(5, "%" + searchKeyword + "%");
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String ID_KRS = rs.getString("id_krs");
                String NIM = rs.getString("nim");
                String Semester = rs.getString("semester");
                String Mata_Kuliah = rs.getString("mata_kuliah");
                String Dosen = rs.getString("dosen");

                Object[] rowData = {ID_KRS, NIM, Semester, Mata_Kuliah, Dosen};
                model.addRow(rowData);
            }

            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan", "Not Found", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } catch (SQLException e) {
        Logger.getLogger(FormKRS.class.getName()).log(Level.SEVERE, null, e);
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat melakukan pencarian", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnCariActionPerformed

    private void btnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakActionPerformed
        try {
            String reportPath = "src/report/reportKRS.jasper";
            Connection conn = Koneksi.getConnection(); // Menggunakan metode getConnection() dari kelas Koneksi

            HashMap<String, Object> parameters = new HashMap<>();
            JasperPrint print = JasperFillManager.fillReport(reportPath, parameters, conn);
            JasperViewer viewer = new JasperViewer(print, false);
            viewer.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error displaying report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCetakActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormKRS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormKRS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormKRS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormKRS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormKRS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnCetak;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblKRS;
    private javax.swing.JTextField textCari;
    private javax.swing.JTextField textDosen;
    private javax.swing.JTextField textMataKuliah;
    private javax.swing.JTextField textNim;
    private javax.swing.JTextField textidkrs;
    // End of variables declaration//GEN-END:variables

    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblKRS.getModel();
        model.addColumn("ID KRS");
        model.addColumn("NIM");
        model.addColumn("Semester");
        model.addColumn("Mata Kuliah");
        model.addColumn("Dosen");
    }

    private void loadData() {
        getData((DefaultTableModel) tblKRS.getModel());
    }
    
    private int getSemesterValue(String semester) {
        switch (semester) {
            case "Semester 1":
                return 1;
            case "Semester 2":
                return 2;
            case "Semester 3":
                return 3;
            case "Semester 4":
                return 4;
            case "Semester 5":
                return 5;
            case "Semester 6":
                return 6;
            case "Semester 7":
                return 7;
            case "Semester 8":
                return 8;
            default:
                return 0;
        }
    }


    private void getData(DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
            String sql = "SELECT * FROM krs";
            try(PreparedStatement st = conn.prepareStatement(sql)){
                ResultSet rs = st.executeQuery();
                
                while (rs.next()) {
                    String ID_KRS = rs.getString("id_krs");
                    String NIM = rs.getString("nim");
                    String Semester = rs.getString("semester");
                    String Mata_Kuliah = rs.getString("mata_kuliah");
                    String Dosen = rs.getString("dosen");
                    
                    Object[] rowData = {ID_KRS, NIM, Semester, Mata_Kuliah, Dosen};
                    model.addRow(rowData);
                }
            } catch (Exception e){
                
            }
        } catch (Exception e){
            Logger.getLogger(FormKRS.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    private void clearInputFields() {
        textidkrs.setText(null);
        textNim.setText(null);
        cmbSemester.setSelectedItem("Semester 1");
        textMataKuliah.setText(null);
        textDosen.setText(null);
    }

    
}
