/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

/**
 *
 * @author PUSPA
 */

import com.mysql.cj.jdbc.PreparedStatementWrapper;
import com.mysql.cj.protocol.Resultset;
import db.Koneksi;
import java.sql.*;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class FormTransaksi extends javax.swing.JFrame {

    /**
     * Creates new form FormTransaksi
     */
    
    private final Connection conn;
    
    public FormTransaksi() {
        initComponents();
        
        conn = Koneksi.getConnection();
        setTabelModel();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textidtransaksi = new javax.swing.JTextField();
        textNim = new javax.swing.JTextField();
        cmbSemester = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textBiaya = new javax.swing.JTextField();
        textPajak = new javax.swing.JTextField();
        btnTotal = new javax.swing.JButton();
        textTotal = new javax.swing.JTextField();
        textCari = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransaksi = new javax.swing.JTable();
        btnSimpan = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnKembali = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Data KRS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 12))); // NOI18N

        jLabel1.setText("ID Transaksi");

        jLabel2.setText("NIM");

        jLabel3.setText("Semester");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semester 1", "Semester 2", "Semester 3", "Semester 4", "Semester 5", "Semester 6", "Semester 7", "Semester 8" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        jLabel4.setText("Biaya");

        jLabel5.setText("Pajak");

        btnTotal.setText("Total Pembayaran");
        btnTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textidtransaksi)
                    .addComponent(textNim)
                    .addComponent(cmbSemester, 0, 100, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textTotal)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textBiaya, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(textPajak)))
                    .addComponent(btnTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textidtransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(textBiaya, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textNim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(textPajak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        tblTransaksi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTransaksiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTransaksi);

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnKembali.setText("Kembali");
        btnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKembaliActionPerformed(evt);
            }
        });

        btnCari.setText("Cari Data");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSimpan)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnHapus)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnKembali)
                        .addGap(40, 40, 40))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(textCari))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan)
                    .addComponent(btnEdit)
                    .addComponent(btnHapus)
                    .addComponent(btnClear)
                    .addComponent(btnKembali))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKembaliActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        FormMenu menu = new FormMenu();
        menu.setVisible(true);
    }//GEN-LAST:event_btnKembaliActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        textidtransaksi.setText(null);
        textNim.setText(null);
        cmbSemester.setSelectedItem("Semester 1");
        textBiaya.setText(null);
        textPajak.setText(null);
        textTotal.setText(null);
        textCari.setText(null);
    }//GEN-LAST:event_btnClearActionPerformed

    private boolean isNimExists(String nim) {
        try {
            String sql = "SELECT * FROM mahasiswa WHERE nim=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, nim);
                ResultSet rs = st.executeQuery();
                return rs.next(); // Jika ada data, return true
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormKRS.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
    
    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        String idtransaksi = textidtransaksi.getText();
        String nim = textNim.getText();
        String semester = cmbSemester.getSelectedItem().toString();
        String biaya = textBiaya.getText();
        String pajak = textPajak.getText();
        String total = textTotal.getText();
        
        // Sebelum menyimpan data, periksa apakah nim yang dimasukkan sudah ada di tabel mahasiswa
        if (!isNimExists(nim)) {
        JOptionPane.showMessageDialog(this, "NIM tidak ditemukan di tabel mahasiswa", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
        if (textidtransaksi.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID Transaksi Belum Diisi");
            textidtransaksi.requestFocus(); 
        } else if (textNim.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "NIM Belum Diisi");
            textNim.requestFocus();
        } else if (textBiaya.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Biaya Belum Diisi");
            textBiaya.requestFocus();
        } else if (textPajak.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Pajak Belum Diisi");
        } else{
            try {
                String sql = "INSERT INTO transaksi (id_transaksi, nim, semester, biaya, pajak, total_pembayaran) VALUES (?, ?, ?, ?, ?, ?)";
                try (PreparedStatement st = conn.prepareStatement(sql)) {
                    st.setString(1, idtransaksi);
                    st.setString(2, nim);
                    st.setInt(3, getSemesterValue(semester));
                    st.setString(4, biaya);
                    st.setString(5, pajak);
                    st.setString(6, total);

                    int rowsAffected = st.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");
                        // Bersihkan input setelah penyimpanan
                        clearInputFields();
                        // Perbarui tabel
                        loadData();
                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menyimpan data", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(FormTransaksi.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data", "Error", JOptionPane.ERROR_MESSAGE);
            }
   
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        if (cmbSemester.getSelectedItem().equals("Semester 1")) {
        int biaya = 3500000;
        int pajak = 100000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    } else if (cmbSemester.getSelectedItem().equals("Semester 2")) {
        int biaya = 3600000;
        int pajak = 150000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    } else if (cmbSemester.getSelectedItem().equals("Semester 3")) {
        int biaya = 3700000;
        int pajak = 200000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    } else if (cmbSemester.getSelectedItem().equals("Semester 4")) {
        int biaya = 3800000;
        int pajak = 250000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    } else if (cmbSemester.getSelectedItem().equals("Semester 5")) {
        int biaya = 3900000;
        int pajak = 300000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    } else if (cmbSemester.getSelectedItem().equals("Semester 6")) {
        int biaya = 4000000;
        int pajak = 350000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    } else if (cmbSemester.getSelectedItem().equals("Semester 7")) {
        int biaya = 4100000;
        int pajak = 400000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    } else if (cmbSemester.getSelectedItem().equals("Semester 8")) {
        int biaya = 4200000;
        int pajak = 450000;
        textBiaya.setText(Integer.toString(biaya));
        textPajak.setText(Integer.toString(pajak));
    }
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void btnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalActionPerformed
        int biaya = Integer.parseInt(textBiaya.getText());
        int pajak = Integer.parseInt(textPajak.getText());

        int totalPembayaran = biaya + pajak;

        textTotal.setText(Integer.toString(totalPembayaran));
    }//GEN-LAST:event_btnTotalActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // Ambil data dari input fields
        String idtransaksi = textidtransaksi.getText();
        String nim = textNim.getText();
        String semester = cmbSemester.getSelectedItem().toString();
        String biaya = textBiaya.getText();
        String pajak = textPajak.getText();
        String total = textTotal.getText();

        // Pastikan ada baris yang dipilih di tabel
        int selectedRow = tblTransaksi.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris di tabel yang ingin diedit");
            return;
        }

        // Ambil ID Transaksi dari baris terpilih di tabel
        String idkrsTerpilih = tblTransaksi.getValueAt(selectedRow, 0).toString();

        // Lakukan operasi edit
        try {
            String sql = "UPDATE transaksi SET id_transaksi=?, nim=?, semester=?, biaya=?, pajak=?, total_pembayaran=? WHERE id_transaksi=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, idtransaksi);
                st.setString(2, nim);
                st.setInt(3, getSemesterValue(semester));
                st.setString(4, biaya);
                st.setString(5, pajak);
                st.setString(6, total);
                st.setString(7, idkrsTerpilih);

                // Eksekusi query
                int rowsUpdated = st.executeUpdate();

                if (rowsUpdated > 0) {
                    // Data berhasil diupdate
                    JOptionPane.showMessageDialog(this, "Data Berhasil diupdate");
                    // Refresh tabel
                    loadData();
                    // Bersihkan input fields setelah update
                    clearInputFields();
                } else {
                    // Data gagal diupdate
                    JOptionPane.showMessageDialog(this, "Gagal mengupdate data");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormTransaksi.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void tblTransaksiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTransaksiMouseClicked
        // Dapatkan indeks baris yang dipilih
        int selectedRow = tblTransaksi.getSelectedRow();

        // Periksa apakah baris terpilih
        if (selectedRow != -1) {
            // Dapatkan data dari baris terpilih
            String idtransaksi = tblTransaksi.getValueAt(selectedRow, 0).toString();
            String nim = tblTransaksi.getValueAt(selectedRow, 1).toString();
            String semester = tblTransaksi.getValueAt(selectedRow, 2).toString();
            String biaya = tblTransaksi.getValueAt(selectedRow, 3).toString();
            String pajak = tblTransaksi.getValueAt(selectedRow, 4).toString();
            String total = tblTransaksi.getValueAt(selectedRow, 1).toString();

            // Tetapkan data ke kolom teks
            textidtransaksi.setText(idtransaksi);
            textNim.setText(nim);
            cmbSemester.setSelectedItem(semester);
            textBiaya.setText(biaya);
            textPajak.setText(pajak);
            textTotal.setText(total);
        }
    }//GEN-LAST:event_tblTransaksiMouseClicked

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // Pastikan ada baris yang dipilih di tabel
        int selectedRow = tblTransaksi.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris di tabel yang ingin dihapus");
            return;
        }

        // Konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Ambil ID Transaksi dari baris terpilih di tabel
            String idtransaksiTerpilih = tblTransaksi.getValueAt(selectedRow, 0).toString();

            // Lakukan operasi hapus
            try {
                String sql = "DELETE FROM transaksi WHERE id_transaksi=?";
                try (PreparedStatement st = conn.prepareStatement(sql)) {
                    st.setString(1, idtransaksiTerpilih);

                    // Eksekusi query
                    int rowsDeleted = st.executeUpdate();

                    if (rowsDeleted > 0) {
                        // Data berhasil dihapus
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus");
                        // Refresh tabel
                        loadData();
                        // Bersihkan input fields setelah hapus
                        clearInputFields();
                    } else {
                        // Data gagal dihapus
                        JOptionPane.showMessageDialog(this, "Gagal menghapus data");
                    }
                }
            } catch (SQLException e) {
                Logger.getLogger(FormTransaksi.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        String searchKeyword = textCari.getText().trim();

        if (searchKeyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Masukkan kata kunci untuk pencarian", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblTransaksi.getModel();
        model.setRowCount(0); // Clear existing data in the table

        try {
            String sql = "SELECT * FROM transaksi WHERE id_transaksi LIKE ? OR nim LIKE ? OR semester LIKE ? OR biaya LIKE ? OR pajak LIKE ? OR total_pembayaran LIKE ?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, "%" + searchKeyword + "%");
                st.setString(2, "%" + searchKeyword + "%");
                st.setString(3, "%" + searchKeyword + "%");
                st.setString(4, "%" + searchKeyword + "%");
                st.setString(5, "%" + searchKeyword + "%");
                st.setString(6, "%" + searchKeyword + "%");
                ResultSet rs = st.executeQuery();

                while (rs.next()) {
                    String ID_Transaksi = rs.getString("id_transaksi");
                    String NIM = rs.getString("nim");
                    String Semester = rs.getString("semester");
                    String Biaya = rs.getString("biaya");
                    String Pajak = rs.getString("pajak");
                    String Total_Pembayaran = rs.getString("total_pembayaran");

                    Object[] rowData = {ID_Transaksi, NIM, Semester, Biaya, Pajak, Total_Pembayaran};
                    model.addRow(rowData);
                }

                if (model.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "Data tidak ditemukan", "Not Found", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(FormTransaksi.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat melakukan pencarian", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCariActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormTransaksi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnTotal;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTransaksi;
    private javax.swing.JTextField textBiaya;
    private javax.swing.JTextField textCari;
    private javax.swing.JTextField textNim;
    private javax.swing.JTextField textPajak;
    private javax.swing.JTextField textTotal;
    private javax.swing.JTextField textidtransaksi;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        getData((DefaultTableModel) tblTransaksi.getModel());
    }
    
    private int getSemesterValue(String semester) {
        switch (semester) {
            case "Semester 1":
                return 1;
            case "Semester 2":
                return 2;
            case "Semester 3":
                return 3;
            case "Semester 4":
                return 4;
            case "Semester 5":
                return 5;
            case "Semester 6":
                return 6;
            case "Semester 7":
                return 7;
            case "Semester 8":
                return 8;
            default:
                return -1;
        }
    }

    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblTransaksi.getModel();
        model.addColumn("ID Transaksi");
        model.addColumn("NIM");
        model.addColumn("Semester");
        model.addColumn("Biaya");
        model.addColumn("Pajak");
        model.addColumn("Total Pembayaran");
    }

    private void getData(DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
            String sql = "SELECT * FROM transaksi";
            try(PreparedStatement st = conn.prepareStatement(sql)){
                ResultSet rs = st.executeQuery();
                
                while (rs.next()) {
                    String ID_Transaksi = rs.getString("id_transaksi");
                    String NIM = rs.getString("nim");
                    String Semester = rs.getString("semester");
                    String Biaya = rs.getString("biaya");
                    String Pajak = rs.getString("pajak");
                    String Total_Pembayaran = rs.getString("total_pembayaran");
                    
                    Object[] rowData = {ID_Transaksi, NIM, Semester, Biaya, Pajak, Total_Pembayaran};
                    model.addRow(rowData);
                }
            } catch (Exception e){
                
            }
        } catch (Exception e){
            Logger.getLogger(FormTransaksi.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    private void clearInputFields() {
        textidtransaksi.setText(null);
        textNim.setText(null);
        cmbSemester.setSelectedItem("Semester 1");
        textBiaya.setText(null);
        textPajak.setText(null);
        textTotal.setText(null);
    }
    
}
